import asyncio
import aio_pika
import ipaddress
import os
from concurrent.futures import ThreadPoolExecutor
from proto.matcher_pb2 import MatchRequest, MatchResponse, HostSubnetPair

class AsyncIPMatcherServer:
    def __init__(self):
        self.connection = None
        self.channel = None
        self.executor = ThreadPoolExecutor(max_workers=10)
        self.running = False
        self.rabbit_user = os.getenv("RABBITMQ_USER")
        self.rabbit_pass = os.getenv("RABBITMQ_PASSWORD")


    async def connect(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ"""
        try:
            self.connection = await aio_pika.connect_robust(
                f"amqp://{self.rabbit_user}:{self.rabbit_pass}@rabbitmq/",
                timeout=10
            )
            self.channel = await self.connection.channel()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º QoS –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
            await self.channel.set_qos(prefetch_count=20)

            # –û–±—ä—è–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥–∏
            self.request_queue = await self.channel.declare_queue(
                'match_requests', durable=True, auto_delete=False
            )
            await self.channel.declare_queue(
                'match_responses', durable=True, auto_delete=False
            )

            print("Connected to RabbitMQ successfully")
            return True

        except Exception as e:
            print(f"Connection failed: {e}")
            return False

    def find_best_subnet_sync(self, host_ip, subnets):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–¥—Å–µ—Ç–∏ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ thread pool)"""
        best_subnet = None
        best_prefix_len = -1

        for subnet_str in subnets:
            try:
                subnet = ipaddress.ip_network(subnet_str, strict=False)
                if host_ip in subnet and subnet.prefixlen > best_prefix_len:
                    best_subnet = subnet_str
                    best_prefix_len = subnet.prefixlen
            except (ValueError, ipaddress.AddressValueError):
                continue

        return best_subnet if best_subnet else "0"

    async def process_single_host_async(self, host, subnets):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞"""
        loop = asyncio.get_event_loop()
        try:
            host_ip = ipaddress.ip_address(host)
            best_subnet = await loop.run_in_executor(
                self.executor, self.find_best_subnet_sync, host_ip, subnets
            )
            return (host, best_subnet)
        except (ValueError, ipaddress.AddressValueError):
            return (host, "0")

    async def process_message(self, message: aio_pika.IncomingMessage):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        async with message.process():
            try:
                # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å
                request = MatchRequest()
                request.ParseFromString(message.body)

                print(f"Received request with {len(request.addresses)} addresses")

                # –†–∞–∑–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å–∞
                hosts = []
                subnets = []

                for address in request.addresses:
                    if '/' in address:
                        subnets.append(address)
                    else:
                        hosts.append(address)

                print(f"Processing {len(hosts)} hosts against {len(subnets)} subnets")

                # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–æ—Å—Ç–∞
                tasks = [
                    self.process_single_host_async(host, subnets)
                    for host in hosts
                ]

                # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                results = await asyncio.gather(*tasks, return_exceptions=True)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                response = MatchResponse()
                for result in results:
                    if not isinstance(result, Exception) and result:
                        host, subnet = result
                        response.matches.append(HostSubnetPair(host=host, subnet=subnet))

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                await self.channel.default_exchange.publish(
                    aio_pika.Message(
                        body=response.SerializeToString(),
                        correlation_id=message.correlation_id,
                        delivery_mode=aio_pika.DeliveryMode.PERSISTENT
                    ),
                    routing_key='match_responses'
                )

                print(f"‚úÖ Processed {len(response.matches)} matches")

            except Exception as e:
                print(f"Error processing message: {e}")
                # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                error_response = MatchResponse()
                await self.channel.default_exchange.publish(
                    aio_pika.Message(
                        body=error_response.SerializeToString(),
                        correlation_id=message.correlation_id
                    ),
                    routing_key='match_responses'
                )

    async def start_consuming(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è"""
        await self.request_queue.consume(self.process_message)
        print("Server started consuming messages...")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        print("Connecting to RabbitMQ")
        connected = await self.connect()
        if not connected:
            print("Failed to connect, retrying in 5 seconds")
            await asyncio.sleep(5)
            await self.start()
            return

        await self.start_consuming()
        self.running = True
        print("Async IP Matcher Server started successfully!")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.running = False
        if self.connection:
            await self.connection.close()
        self.executor.shutdown()
        print("Server stopped")

async def main():
    server = AsyncIPMatcherServer()
    try:
        await server.start()
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        while server.running:
            await asyncio.sleep(1)
            if not server.connection or server.connection.is_closed:
                print("üîå Connection lost, reconnecting...")
                await server.stop()
                await asyncio.sleep(2)
                await server.start()

    except KeyboardInterrupt:
        print("\nShutting down gracefully...")
    except Exception as e:
        print(f"Unexpected error: {e}")
    finally:
        await server.stop()

if __name__ == "__main__":
    asyncio.run(main())
